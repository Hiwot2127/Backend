name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      DATABASE_URL: postgres://testuser:testpass@localhost:5432/testdb
      JWT_SECRET: github-actions-secret

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Ensure uploads directory exists
        run: mkdir -p uploads

      - name: Wait for Postgres (TCP)
        shell: bash
        run: |
          for i in {1..60}; do
            node -e "require('net').connect(5432,'localhost').on('connect', s=>{s.end();process.exit(0)}).on('error', ()=>process.exit(1));"
            if [ $? -eq 0 ]; then echo 'Postgres is up'; break; fi
            echo "Waiting for Postgres... ($i)"
            sleep 1
          done

      - name: Create .env for app
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "JWT_SECRET=${JWT_SECRET}" >> .env
          echo "NODE_ENV=${NODE_ENV}" >> .env

      - name: Prisma generate
        run: npx prisma generate

      - name: Prisma migrate (deploy)
        run: npx prisma migrate deploy

      - name: Run tests with coverage
        run: npx vitest run --coverage --reporter=verbose

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/