name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
          --health-start-period 10s

    env:
      NODE_ENV: test
      # Use localhost to hit the published port from the runner
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
      JWT_SECRET: github-actions-secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Ensure uploads dir
        run: mkdir -p uploads

      - name: Install Postgres client (pg_isready/psql)
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for Postgres
        shell: bash
        run: |
          for i in {1..60}; do
            pg_isready -h localhost -p 5432 -d testdb -U testuser && break
            echo "Waiting for Postgres... ($i)"; sleep 1
          done
          # small grace period to ensure accepts connections
          sleep 2

      - name: Create .env for app
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" > .env
          echo "JWT_SECRET=${JWT_SECRET}" >> .env
          echo "NODE_ENV=${NODE_ENV}" >> .env

      - name: Prisma version
        run: npx prisma --version

      - name: Prisma generate
        run: npx prisma generate

      - name: Prisma migrate (deploy) with retry
        shell: bash
        run: |
          for i in {1..5}; do
            npx prisma migrate deploy && break || {
              echo "migrate deploy attempt $i failed; retrying in 3s..."
              sleep 3
            }
          done

      - name: Run tests with coverage
        run: npx vitest run --coverage --reporter=verbose

      - name: Build
        run: npm run build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/